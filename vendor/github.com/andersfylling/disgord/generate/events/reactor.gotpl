package disgord

// Code generated - This file has been automatically generated by generate/events/main.go - DO NOT EDIT.
// Warning: This file is overwritten at "go generate", instead adapt reactor.go and event/events.go and run `go generate`

//////////////////////////////////////////////////////
//
// Helper funcs
//
//////////////////////////////////////////////////////

func defineResource(evt string) (resource evtResource) {
    switch evt {
	{{range .}} {{if .IsDiscordEvent}}
	case Evt{{.}}:
        resource = &{{.}}{} {{end}} {{end}}
    }

    return resource
}

func isHandler(h Handler) (ok bool) {
	switch h.(type) {
    case SimpleHandler:
        ok = true
    case SimplestHandler:
        ok = true
    case chan interface{}:
        ok = true
    {{- range .}} {{if .IsDiscordEvent}}
    case {{.}}Handler:
        ok = true
    case chan *{{.}}:
        ok = true
    {{- end}}{{- end}}
    }
    return ok
}

func closeChannel(channel interface{}) {
	switch t := channel.(type) {
    case chan interface{}:
        close(t)
    {{- range .}} {{if .IsDiscordEvent}}
    case chan *{{.}}:
        close(t)
    {{- end}}{{- end}}
    }
}

//////////////////////////////////////////////////////
//
// Dispatcher: contructor + repetitive methods
//
//////////////////////////////////////////////////////

// newDispatcher construct a Dispatch object for reacting to web socket events
// from discord
func newDispatcher() *dispatcher {
	d := &dispatcher{
		handlerSpecs: make(map[string][]*handlerSpec),
		shutdown: make(chan struct{}),
	}

	return d
}

func (d *dispatcher) trigger(h Handler, evt resource) {
	switch t := h.(type) {
    case SimpleHandler:
        t(d.session)
    case SimplestHandler:
        t()
    case chan interface{}:
        t <- evt
    case chan<- interface{}:
        t <- evt
    {{- range .}} {{if .IsDiscordEvent}}
    case {{.}}Handler:
        t(d.session, evt.(*{{.}}))
    case chan *{{.}}:
        t <- evt.(*{{.}})
    case chan<- *{{.}}:
        t <- evt.(*{{.}})
    {{- end}}{{- end}}
    }
}

//////////////////////////////////////////////////////
//
// Handler Signatures
//
//////////////////////////////////////////////////////

{{range .}}
// {{.}}Handler is triggered in {{.}} events
type {{.}}Handler = func(s Session, h *{{.}}){{end}}
