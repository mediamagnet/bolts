package disgord

import (
	"fmt"
	"sort"
	"strings"
)

//////////////////////////////////////////////////////
//
// demultiplexer
//
//////////////////////////////////////////////////////

func Sort(v interface{}, fs ...Flag) {
    if v == nil {
        return
    }

    flags := mergeFlags(fs)
    {{- range $sorter := $.Sorters }}
    if (flags & SortBy{{ $sorter.Field }}) > 0 {
        sortBy{{ $sorter.Field }}(v, flags)
    } else {{- end }} if list, ok := v.(sort.Interface); ok {
		if (flags & OrderDescending) > 0 {
			sort.Sort(sort.Reverse(list))
		} else {
			sort.Sort(list)
		}
	} else if list, ok := v.([]*Role); ok {
		if (flags & OrderDescending) > 0 {
			sort.Sort(sort.Reverse(roles(list)))
		} else {
			sort.Sort(roles(list))
		}
	} else if list, ok := v.(*[]*Role); ok {
		if (flags & OrderDescending) > 0 {
			sort.Sort(sort.Reverse(roles(*list)))
		} else {
			sort.Sort(roles(*list))
		}
    } else {
        panic("type is missing sort.Interface implementation")
    }
}

func derefSliceP(v interface{}) (s interface{}) {
    switch t := v.(type) {
    {{- range $t := $.Types }}
    case *[]*{{ $t.Name }}:
        s = *t
    {{- end }}
    default:
        s = t
    }

    return s
}


{{- range $sorter := $.Sorters }}
func sortBy{{ $sorter.Field }}(v interface{}, flags Flag) {
    var descending bool
    if (flags & OrderDescending) > 0 {
        descending = true
    }

    v = derefSliceP(v)

    var less func(i, j int) bool
    switch s := v.(type) {
    {{- range $t := $sorter.Types }}
    case []*{{ $t.Name }}:
        if descending {
            less = func(i, j int) bool { return {{ Descending $sorter.Field "s" }} }
        } else {
            less = func(i, j int) bool { return {{ Ascending $sorter.Field "s" }} }
        }
    {{- end }}
    default:
        panic(fmt.Sprintf("type %+v does not support sorting", s))
    }

    sort.Slice(v, less)
}
{{- end }}